#!/usr/bin/env bash
if [[ $MCD_CHAIN == "mainnet" ]]; then
  echo "Warning: testnet only. Do not test with real balances"
  exit 1
fi

export SETH_ASYNC=yes
export ETH_GAS=700000

#====================================================================
# Helpers
#====================================================================

p() { [ $1 = "false" ] && echo "FAIL" && exit; }

numericCompare() {
  p $(awk -v n1="${1}" -v n2="${2}" \
    'BEGIN { print (n1 == n2) ? "true" : "false" }' 2>/dev/null)
}

assertBalanceChanged() {
  diff=$(echo "$1 - $2" | bc)
  amt=$(echo $3 | sed 's/-//g')
  numericCompare $diff $amt
}

testChange() {
  cmd=$1; amt=$2; bal=$3; dir=$4;
  echo "$MCD_ILK: mcd $cmd $amt"
  lt=$(eval "mcd $bal")
  eval "mcd $cmd -- $amt"
  gt=$(eval "mcd $bal")
  if [[ $dir == "+" ]]; then
    assertBalanceChanged $gt $lt $amt
  else
    assertBalanceChanged $lt $gt $amt
  fi
}

testInc() { testChange "${@}" "+"; }

testDec() { testChange "${@}"; }

#====================================================================
# Tests
#====================================================================

updatePrice() {
  lad=$(eval echo "\${VAL_$MCD_ILK?}")
  amt=$(seth --to-uint256 $(seth --to-wei "$1" ETH))
  seth send "$lad" "poke(bytes32)" "$amt"
  mcd poke
}

testEthFrob() {
  export MCD_ILK=ETH-A
  mcd wrap 10
  testInc "gem join" "10"    "gem balance vat" # Gem join
  testInc "frob"     "1 4"   "gem balance ink" # Lock & draw
  testDec "dai exit" "4"     "dai balance vat" # Dai exit
  testInc "dai join" "4"     "dai balance vat" # Dai join
  testDec "frob"     "-1 -4" "gem balance ink" # Wipe & free
  testDec "gem exit" "10"    "gem balance vat" # Gem exit
  mcd unwrap 10
}
testEthFrob

testBite() {
  export MCD_ILK=ETH-A
  dink=10
  spot=$(mcd ilk spot); mat=$(mcd ilk mat)
  dart=$(echo "($dink * $spot) - 1" | bc -l)
  mcd gem join $dink
  mcd frob $dink $dart
  ink=$(mcd gem balance ink)
  updatePrice $(echo "($spot * $mat) * 0.9" | bc -l) # unsafe
  mcd --urn=$ETH_FROM bite
  updatePrice $(echo "($spot * $mat) * 1" | bc -l) # safe
  assertBalanceChanged $ink 0 $ink
}
testBite

testCdpOpen() {
  cdp=$(mcd cdp open)
  cdp=${cdp#*cdp}
  cdp=$(echo $cdp | tr -d '[:space:]')
  [[ $cdp =~ [[:digit:]]+ ]] || (echo "FAIL" && exit)
  echo $cdp
}

testCdp() {
  export MCD_ILK=ETH-A
  id=$(testCdpOpen)
  testDec "cdp $id lock" "10" "gem balance ext"
  testInc "cdp $id draw" "10" "dai balance ext"
  testDec "cdp $id wipe" "10" "dai balance ext"
  testInc "cdp $id free" "10" "gem balance ext"
}
testCdp

# testFlap() {
#   amt=1000
#   rad=$(seth --to-uint256 $(bc <<<"$amt * 10 ^ 45 / 1"))
#   seth send $MCD_VAT 'move(address, address, uint)' $ETH_FROM $MCD_VOW $rad
# }
# testFlap
